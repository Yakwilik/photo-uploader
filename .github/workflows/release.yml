name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            arch: amd64
            ext: .exe
          - os: windows-latest
            arch: 386
            ext: .exe
          # macOS
          - os: macos-latest
            arch: amd64
            ext: ""
          - os: macos-latest
            arch: arm64
            ext: ""
          # Linux
          - os: ubuntu-latest
            arch: amd64
            ext: ""
          - os: ubuntu-latest
            arch: 386
            ext: ""
          - os: ubuntu-latest
            arch: arm64
            ext: ""
          - os: ubuntu-latest
            arch: arm
            ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'macos-latest' && 'darwin' || 'linux' }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="file-uploader-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
          go build -ldflags="-s -w -X github.com/khasbulatabdullin/photo-uploader/internal/version.Version=${{ github.ref_name }}" -o $BINARY_NAME ./cmd/photo-uploader
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: file-uploader-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.BINARY_NAME }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Create release archive
        run: |
          mkdir -p release
          for artifact in artifacts/*/; do
            if [ -d "$artifact" ]; then
              artifact_name=$(basename "$artifact")
              cp "$artifact"/* release/
            fi
          done
          
          # Create archives for each platform
          cd release
          for binary in file-uploader-*; do
            if [ -f "$binary" ]; then
              # Create zip for Windows
              if [[ "$binary" == *"windows"* ]]; then
                zip "${binary%.exe}.zip" "$binary"
                rm "$binary"
              else
                # Create tar.gz for Unix-like systems
                tar -czf "${binary}.tar.gz" "$binary"
                rm "$binary"
              fi
            fi
          done

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 🚀 New Release: ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📦 Available Downloads:" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            for file in release/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                size=$(du -h "$file" | cut -f1)
                echo "- \`$filename\` ($size)" >> $GITHUB_OUTPUT
              fi
            done
            echo "" >> $GITHUB_OUTPUT
            echo "### 🛠️ Installation:" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "1. Download the appropriate binary for your platform" >> $GITHUB_OUTPUT
            echo "2. Make it executable (Unix systems): \`chmod +x file-uploader-*\`" >> $GITHUB_OUTPUT
            echo "3. Run: \`./file-uploader-*\` or \`file-uploader-*.exe\` (Windows)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 📱 Features:" >> $GITHUB_OUTPUT
            echo "- Universal file uploader for old browsers and mobile devices" >> $GITHUB_OUTPUT
            echo "- Compatible with IE9+, Safari 5+, Chrome 20+, iOS 9.3.5+, Android 4.0+" >> $GITHUB_OUTPUT
            echo "- Multiple file selection and upload" >> $GITHUB_OUTPUT
            echo "- Automatic IP address detection" >> $GITHUB_OUTPUT
            echo "- Progress tracking" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
