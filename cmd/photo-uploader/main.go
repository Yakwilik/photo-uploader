package main

import (
	"flag"
	"fmt"
	"html/template"
	"io"
	"log"
	"net"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/khasbulatabdullin/photo-uploader/internal/version"
)

const (
	uploadDir   = "./uploads"
	maxFileSize = 50 << 20 // 50 MB –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω
type PageData struct {
	Message string
	Error   string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
func getLocalIP() string {
	conn, err := net.Dial("udp", "8.8.8.8:80")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞: %v", err)
		return "localhost"
	}
	defer conn.Close()

	localAddr := conn.LocalAddr().(*net.UDPAddr)
	return localAddr.IP.String()
}

// ensureUploadDir —Å–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
func ensureUploadDir() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
	if _, err := os.Stat(uploadDir); os.IsNotExist(err) {
		log.Printf("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...", uploadDir)

		// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø—Ä–∞–≤–∞–º–∏ 0755 (rwxr-xr-x)
		if err := os.MkdirAll(uploadDir, 0755); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é %s: %v", uploadDir, err)
		}

		log.Printf("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", uploadDir)
	} else if err != nil {
		// –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v", uploadDir, err)
	} else {
		// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if err := checkDirPermissions(uploadDir); err != nil {
			return fmt.Errorf("–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v", uploadDir, err)
		}
		log.Printf("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", uploadDir)
	}

	return nil
}

// checkDirPermissions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func checkDirPermissions(dir string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	if _, err := os.ReadDir(dir); err != nil {
		return fmt.Errorf("–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	testFile := filepath.Join(dir, ".test_write_permission")
	if err := os.WriteFile(testFile, []byte("test"), 0644); err != nil {
		return fmt.Errorf("–Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
	os.Remove(testFile)

	return nil
}

func main() {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var showVersion = flag.Bool("version", false, "Show version information")
	var port = flag.String("port", "8080", "Port to listen on")
	flag.Parse()

	if *showVersion {
		version.Print()
		return
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := ensureUploadDir(); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫:", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/upload", uploadHandler)
	http.HandleFunc("/uploads/", serveFileHandler)
	http.HandleFunc("/test", testHandler)

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	http.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./static/"))))

	// –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å
	ip := getLocalIP()

	fmt.Println("=" + strings.Repeat("=", 60))
	fmt.Println("üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù")
	fmt.Println("=" + strings.Repeat("=", 60))
	fmt.Printf("üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:%s\n", *port)
	fmt.Printf("üåê –°–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å:   http://%s:%s\n", ip, *port)
	fmt.Println("=" + strings.Repeat("=", 60))
	fmt.Println("üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
	fmt.Printf("   –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ: http://%s:%s\n", ip, *port)
	fmt.Println("=" + strings.Repeat("=", 60))
	fmt.Println("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏ (IE9+, Safari 5+, Chrome 20+)")
	fmt.Println("üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç iOS 9.3.5, Android 4.0+, —Å—Ç–∞—Ä—ã–µ –ø–ª–∞–Ω—à–µ—Ç—ã")
	fmt.Println("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤")
	fmt.Println("üîÑ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤")
	fmt.Println("=" + strings.Repeat("=", 60))

	log.Fatal(http.ListenAndServe("0.0.0.0:"+*port, nil))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
func testHandler(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "test_ios.html")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
func homeHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}

	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="format-detection" content="telephone=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .upload-form {
            text-align: center;
        }
        .file-input-wrapper {
            position: relative;
            display: inline-block;
            margin: 20px 0;
        }
        .file-input {
            position: absolute;
            left: -9999px;
        }
        .file-input-label {
            display: inline-block;
            padding: 12px 24px;
            background-color: #007AFF;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        .file-input-label:hover {
            background-color: #0056CC;
        }
        .file-input-label:active {
            background-color: #004499;
        }
        .submit-btn {
            background-color: #34C759;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
            transition: background-color 0.3s;
        }
        .submit-btn:hover {
            background-color: #28A745;
        }
        .submit-btn:active {
            background-color: #1E7E34;
        }
        .submit-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        .message {
            margin: 20px 0;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .file-info {
            margin: 10px 0;
            font-size: 14px;
            color: #666;
        }
        .progress {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
            display: none;
        }
        .progress-bar {
            height: 100%;
            background-color: #007AFF;
            width: 0%;
            transition: width 0.3s;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h1>
        <p style="text-align: center; color: #666; margin-bottom: 20px;">–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
        
        {{if .Message}}
        <div class="message success">{{.Message}}</div>
        {{end}}
        
        {{if .Error}}
        <div class="message error">{{.Error}}</div>
        {{end}}
        
        <form class="upload-form" action="/upload" method="post" enctype="multipart/form-data" id="uploadForm">
            <div class="file-input-wrapper">
                <input type="file" name="photo" id="photos" class="file-input" multiple required>
                <label for="photos" class="file-input-label">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã</label>
            </div>
            
            <div class="file-info" id="fileInfo" style="display: none;">
                <span id="fileName"></span> (<span id="fileSize"></span>)
            </div>
            
            <div class="progress" id="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div id="progressText" style="text-align: center; margin: 10px 0; font-size: 14px; color: #666;"></div>
            
            <button type="submit" class="submit-btn" id="submitBtn">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
        </form>
    </div>

    <script>
        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å iOS 9.3.5
        document.getElementById('photos').addEventListener('change', function(e) {
            var files = e.target.files;
            var fileInfo = document.getElementById('fileInfo');
            var fileName = document.getElementById('fileName');
            var fileSize = document.getElementById('fileSize');
            
            if (files && files.length > 0) {
                if (files.length === 1) {
                    fileName.textContent = files[0].name;
                    fileSize.textContent = formatFileSize(files[0].size);
                } else {
                    var totalSize = 0;
                    for (var i = 0; i < files.length; i++) {
                        totalSize += files[i].size;
                    }
                    fileName.textContent = files.length + ' —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–æ';
                    fileSize.textContent = formatFileSize(totalSize);
                }
                fileInfo.style.display = 'block';
            } else {
                fileInfo.style.display = 'none';
            }
        });
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            var k = 1024;
            var sizes = ['Bytes', 'KB', 'MB', 'GB'];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        document.getElementById('uploadForm').addEventListener('submit', function(e) {
            e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
            
            var files = document.getElementById('photos').files;
            if (files.length === 0) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                return;
            }
            
            var submitBtn = document.getElementById('submitBtn');
            var progress = document.getElementById('progress');
            var progressBar = document.getElementById('progressBar');
            var progressText = document.getElementById('progressText');
            
            submitBtn.disabled = true;
            submitBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            progress.style.display = 'block';
            progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...';
            
            var uploadedCount = 0;
            var totalFiles = files.length;
            var errors = [];
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            function uploadFile(file, index) {
                var formData = new FormData();
                formData.append('photo', file);
                
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/upload', true);
                
                xhr.onload = function() {
                    uploadedCount++;
                    var progressPercent = (uploadedCount / totalFiles) * 100;
                    progressBar.style.width = progressPercent + '%';
                    progressText.textContent = '–ó–∞–≥—Ä—É–∂–µ–Ω–æ ' + uploadedCount + ' –∏–∑ ' + totalFiles + ' —Ñ–∞–π–ª–æ–≤';
                    
                    if (xhr.status === 200) {
                        // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                        console.log('–§–∞–π–ª ' + file.name + ' –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                    } else {
                        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                        errors.push('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + file.name);
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                    if (uploadedCount === totalFiles) {
                        submitBtn.disabled = false;
                        submitBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
                        progressText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
                        
                        if (errors.length === 0) {
                            alert('–í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                            window.location.reload();
                        } else {
                            alert('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:\\n' + errors.join('\\n'));
                        }
                    }
                };
                
                xhr.onerror = function() {
                    uploadedCount++;
                    errors.push('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + file.name);
                    
                    if (uploadedCount === totalFiles) {
                        submitBtn.disabled = false;
                        submitBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
                        alert('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:\\n' + errors.join('\\n'));
                    }
                };
                
                xhr.send(formData);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
            for (var i = 0; i < files.length; i++) {
                uploadFile(files[i], i);
            }
        });
    </script>
</body>
</html>`

	t, err := template.New("home").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	data := PageData{}
	if err := t.Execute(w, data); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
func uploadHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
	r.Body = http.MaxBytesReader(w, r.Body, maxFileSize)

	// –ü–∞—Ä—Å–∏–º multipart form
	err := r.ParseMultipartForm(maxFileSize)
	if err != nil {
		showErrorPage(w, "–§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
	file, handler, err := r.FormFile("photo")
	if err != nil {
		showErrorPage(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}
	defer file.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
	if handler.Size == 0 {
		showErrorPage(w, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
		return
	}

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if err := ensureUploadDir(); err != nil {
		showErrorPage(w, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫: "+err.Error())
		return
	}

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	ext := filepath.Ext(handler.Filename)
	filename := fmt.Sprintf("%d%s", time.Now().UnixNano(), ext)
	filepath := filepath.Join(uploadDir, filename)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
	dst, err := os.Create(filepath)
	if err != nil {
		showErrorPage(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}
	defer dst.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	_, err = io.Copy(dst, file)
	if err != nil {
		showErrorPage(w, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error())
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
	showSuccessPage(w, fmt.Sprintf("–§–∞–π–ª '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", handler.Filename))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
func serveFileHandler(w http.ResponseWriter, r *http.Request) {
	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ".."
	if strings.Contains(r.URL.Path, "..") {
		http.Error(w, "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –ø—É—Ç—å", http.StatusForbidden)
		return
	}

	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := ensureUploadDir(); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫", http.StatusInternalServerError)
		return
	}

	filepath := filepath.Join(".", r.URL.Path)
	http.ServeFile(w, r, filepath)
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
func showErrorPage(w http.ResponseWriter, errorMsg string) {
	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .back-btn {
            background-color: #007AFF;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚ùå –û—à–∏–±–∫–∞</h1>
        <div class="error">{{.Error}}</div>
        <a href="/" class="back-btn">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è</a>
    </div>
</body>
</html>`

	t, _ := template.New("error").Parse(tmpl)
	data := PageData{Error: errorMsg}
	if err := t.Execute(w, data); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã", http.StatusInternalServerError)
	}
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
func showSuccessPage(w http.ResponseWriter, successMsg string) {
	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .back-btn {
            background-color: #34C759;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>‚úÖ –£—Å–ø–µ—à–Ω–æ!</h1>
        <div class="success">{{.Message}}</div>
        <a href="/" class="back-btn">‚Üê –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</a>
    </div>
</body>
</html>`

	t, _ := template.New("success").Parse(tmpl)
	data := PageData{Message: successMsg}
	if err := t.Execute(w, data); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã", http.StatusInternalServerError)
	}
}
